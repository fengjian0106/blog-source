{"Asset":[{"_id":"themes/hexo-theme-modernist/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":false},{"_id":"themes/hexo-theme-modernist/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":false},{"_id":"themes/hexo-theme-modernist/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":false},{"_id":"themes/hexo-theme-modernist/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":false},{"_id":"themes/hexo-theme-modernist/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":false},{"_id":"themes/hexo-theme-modernist/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":false},{"_id":"themes/hexo-theme-modernist/source/js/gallery.js","path":"js/gallery.js","modified":false},{"_id":"themes/hexo-theme-modernist/source/js/jquery.imagesloaded.min.js","path":"js/jquery.imagesloaded.min.js","modified":false},{"_id":"themes/hexo-theme-modernist/source/js/moment.min.js","path":"js/moment.min.js","modified":false},{"_id":"themes/hexo-theme-modernist/source/js/scale.fix.js","path":"js/scale.fix.js","modified":false},{"_id":"themes/hexo-theme-modernist/source/css/style.styl","path":"css/style.styl","modified":false},{"_id":"themes/hexo-theme-modernist/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":false},{"_id":"themes/hexo-theme-modernist/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":false},{"_id":"themes/hexo-theme-modernist/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":false},{"_id":"themes/hexo-theme-modernist/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":false},{"_id":"themes/hexo-theme-modernist/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":false},{"_id":"themes/hexo-theme-modernist/source/css/images/checker.png","path":"css/images/checker.png","modified":false}],"Cache":[{"_id":"scaffolds/draft.md","mtime":1410500564000},{"_id":"scaffolds/page.md","mtime":1410500564000},{"_id":"scaffolds/photo.md","mtime":1410500564000},{"_id":"scaffolds/post.md","mtime":1410500564000},{"_id":"themes/landscape/Gruntfile.js","mtime":1410500564000},{"_id":"themes/landscape/LICENSE","mtime":1410500564000},{"_id":"themes/landscape/README.md","mtime":1410500564000},{"_id":"themes/landscape/_config.yml","mtime":1410500564000},{"_id":"themes/landscape/package.json","mtime":1410500564000},{"_id":"themes/landscape/scripts/fancybox.js","mtime":1410500564000},{"_id":"themes/landscape/layout/archive.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/category.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/index.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/layout.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/page.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/post.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/tag.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_widget/archive.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_widget/category.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_widget/tag.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/archive.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/article.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/footer.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/head.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/header.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","mtime":1410500564000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","mtime":1410500564000},{"_id":"themes/landscape/source/js/script.js","mtime":1410500564000},{"_id":"themes/landscape/source/css/_extend.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_variables.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/style.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/archive.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/article.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/comment.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/footer.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/header.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_util/grid.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/_util/mixin.styl","mtime":1410500564000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","mtime":1410500564000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","mtime":1410500564000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","mtime":1410500564000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","mtime":1410500564000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","mtime":1410500564000},{"_id":"themes/landscape/source/css/images/banner.jpg","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/blank.gif","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","mtime":1410500564000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","mtime":1410500564000},{"_id":"themes/hexo-theme-modernist/LICENSE","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/README.md","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/_config.yml","mtime":1410502234000},{"_id":"themes/hexo-theme-modernist/languages/default.yml","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/languages/zh-CN.yml","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/archive.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/index.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/layout.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/page.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/post.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/tag.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/after-footer.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/archive-post.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/archive.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/article.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/comment.ejs","mtime":1411709550000},{"_id":"themes/hexo-theme-modernist/layout/_partial/footer.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/google-analytics.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/head.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/header.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/pagination.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/post/category.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/post/date.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/post/gallery.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/post/tag.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/layout/_partial/post/title.ejs","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/fancybox/blank.gif","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/fancybox/fancybox_loading.gif","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/fancybox/fancybox_overlay.png","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/fancybox/fancybox_sprite.png","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/fancybox/jquery.fancybox.css","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/fancybox/jquery.fancybox.pack.js","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/js/gallery.js","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/js/jquery.imagesloaded.min.js","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/js/moment.min.js","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/js/scale.fix.js","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/style.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_base/layout.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_base/variable.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_partial/archive.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_partial/article.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_partial/comment.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_partial/footer.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_partial/header.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_partial/index.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/_partial/syntax.styl","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/fonts/FontAwesome.otf","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/fonts/fontawesome-webfont.eot","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/fonts/fontawesome-webfont.svg","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/fonts/fontawesome-webfont.ttf","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/fonts/fontawesome-webfont.woff","mtime":1410501547000},{"_id":"themes/hexo-theme-modernist/source/css/images/checker.png","mtime":1410501547000},{"_id":"source/about/index.md","mtime":1412919585000},{"_id":"source/_posts/An-iOS-Keyboard-Extension-Performance-Optimize.md","mtime":1411709787000},{"_id":"source/_posts/Move-To-A-New-Blog.md","mtime":1411698563000},{"_id":"source/_posts/WeiXin-Web-App-Coding-Convention-And-Best-Practice.md","mtime":1411716859000},{"_id":"source/_posts/iOS-Cache-Access-And-Custom-Http-Proxy.md","mtime":1412920323000}],"Category":[],"Page":[{"title":"关于我","date":1410502707000,"content":"<p>和小伙伴一起创业中，目前专职iOS开发和手机端web开发，也在用Golang和node.js做一些server端的东西。以前老本行是嵌入式，和硬件打交道比较多，目前也在关注智能硬件方向。</p>\n<p>以前的博客地址，<a href=\"http://blog.csdn.net/jack0106/\" target=\"_blank\" rel=\"external\">http://blog.csdn.net/jack0106/</a>，主要关注点是Linux和meego。</p>\n","source":"about/index.md","raw":"title: 关于我\ndate: 2014-09-12 14:18:27\n---\n\n和小伙伴一起创业中，目前专职iOS开发和手机端web开发，也在用Golang和node.js做一些server端的东西。以前老本行是嵌入式，和硬件打交道比较多，目前也在关注智能硬件方向。\n\n以前的博客地址，[http://blog.csdn.net/jack0106/](http://blog.csdn.net/jack0106/)，主要关注点是Linux和meego。\n","updated":1412919585000,"path":"about/index.html","excerpt":"","_id":"q38yzgrc1lze5mfb","comments":true,"layout":"page"}],"Post":[{"title":"iOS输入法性能优化","date":1411698352000,"tags":["ghhk3h56ejin6n6k","yiivqq1v24a9qmua","5za0e9cgsm8461rg","678l7zpdxcz3a17h"],"content":"<p>一年前指导同事开发了一款andriod版的输入法(非中文)，其中的词库引擎，是我做的技术选型并且在iOS平台上做了原型验证，采用的是 <code>Ternary Search Tree</code>。一年后，也就是最近，随着iOS8的发布，我们也要发布一款iOS版的输入法。</p>\n<h3 id=\"遇到的主要问题\">遇到的主要问题</h3>\n<ol>\n<li><code>Ternary Search Tree</code> 实现 <code>prefix match</code> 的速度很快，但是因为只是一个纯粹的内存数据结构，所以输入法词库的容量是一个瓶颈。在android平台上，考虑多方面因素后，我们的词库中只有3万左右的单词量。iOS平台上做原型验证的时候，词库容量也只能做到10万左右。但是实际的业务需求中，是希望词库容量可以进一步增大的。</li>\n<li>iOS版本输入法的开发过程中，遇到了另外一个问题，就是键盘页面的加载速度和切换速度有点慢，用户能够感觉出来。</li>\n</ol>\n<h3 id=\"解决办法\">解决办法</h3>\n<h4 id=\"词库容量\">词库容量</h4>\n<p>词库容量扩充这个问题，其实一直是一个难题，在 <code>Ternary Search Tree</code> 上也做过一些优化，但是变化并不明显。反而是在做server端开发，学习 <code>LevelDB</code> 的时候，碰巧发现 <code>LevelDB</code> 是一个很好的替代。首先 <code>LevelDB</code> 支持 <code>prefix search</code>，而且搜索速度也很快，测试数据表明完全满足我们的业务需求，其次 <code>LevelDB</code> 是将数据存储在文件系统上的，没有了内存大小的限制，词库的容量很轻松就可以扩充100倍以上，而且有了这种近乎无限的词库容量后，之前有一些需要复杂算法甚至很难实现的业务需求，现在也可以在超大词库的基础上，用<strong>“简单但是粗暴”</strong>的算法实现出来。</p>\n<p>iOS平台上的 <code>Core Data</code> 是一套相当好用的数据持久化存储框架，唯一<em><code>可能存在</code></em>的问题就是性能，因此有些开发者在某些场景中，还是愿意去选择使用 <code>SQLite</code> 。有了这次的开发经验后，相信在某些应用场景中， <code>LevelDB</code> 也将会是一个很好的替代方案，比如 Square 开源的 <a href=\"https://github.com/viewfinderco/viewfinder.git\" target=\"_blank\" rel=\"external\">Viewfinder</a> 中的客户端，就是用  <code>LevelDB</code> 实现的数据存储。<code>LevelDB</code> 的核心是 <code>LSM-Tree</code>，其实 <a href=\"http://sqlite.org/src4/doc/trunk/www/lsmusr.wiki\" target=\"_blank\" rel=\"external\">SQLite4</a> 的核心，也是 <code>LSM-Tree</code>，小伙伴们，你们知道吗 :-)</p>\n<h4 id=\"页面加载和切换速度\">页面加载和切换速度</h4>\n<p>说实话，页面加载速度这个问题，挺出乎意料的，以前我们团队也做了这么多iOS应用了，从来没有在页面速度上遇到过问题，用 <code>Instruments</code>、 <code>NSLog</code> 对比分析了一遍，测量出来的页面加载时间，也和其他应用中页面加载消耗的时间差不多。大家讨论了一下为什么用户会觉得慢，得出的结论是，输入法本来就是一个效率型的工具app，用户心理的期待之一，就是键盘的速度要快，而普通类型的app，用户对速度不会这么敏感。</p>\n<p>问题已经出来了，还是得想办法去优化，吭哧吭哧写代码调试，从3个方面压缩了页面加载切换时消耗的时间：</p>\n<ol>\n<li>键盘的view，是分了好几个层次的，当作为container的UIView加载完成后，就立刻让键盘先显示出来，然后再触发加载真正的keyboard view，这样给用户的一个心理感觉就是键盘弹出的速度很快。</li>\n<li>键盘切换的时候，不再每次都重新从xib中加载对应的view，而是将view缓存在cache里面，用空间换时间。</li>\n<li>移除了keyboard view中每个key view上的 <code>Auto Layout</code> 约束条件，直接在 <code>layoutSubviews</code> 方法中设置subview的 <code>frame</code>，关于这个优化思路，可以看看 <a href=\"http://pilky.me/36/\" target=\"_blank\" rel=\"external\">Optimising Autolayout</a>。需要强调的是，我们并不是否定 <code>Auto Layout</code> ，实际上我们团队现在采用的思路是 <code>Auto Layout</code> 和 <code>Manual Frame Layout</code> 一起使用，代码布局和xib布局一起使用，根据页面的需求做出更合适的选择。</li>\n</ol>\n<p>这款输入法app，我们还全面切换到使用 <code>ReactiveCocoa</code> 这个框架进行开发，当时也怀疑过是不是因为这个框架造成了性能的损失，从 <code>Instruments</code> 的测量数据来看，我们的顾虑是多余的， <code>ReactiveCocoa</code> 虽然使得整个函数调用栈的层次增加了不少，但是，这不是性能瓶颈。</p>\n","source":"_posts/An-iOS-Keyboard-Extension-Performance-Optimize.md","raw":"title: iOS输入法性能优化  \ndate: 2014-09-26 10:25:52\ntags: [iOS, keyborad, LevelDB, AutoLayout]\n---\n\n一年前指导同事开发了一款andriod版的输入法(非中文)，其中的词库引擎，是我做的技术选型并且在iOS平台上做了原型验证，采用的是 `Ternary Search Tree`。一年后，也就是最近，随着iOS8的发布，我们也要发布一款iOS版的输入法。\n\n### 遇到的主要问题\n1. `Ternary Search Tree` 实现 `prefix match` 的速度很快，但是因为只是一个纯粹的内存数据结构，所以输入法词库的容量是一个瓶颈。在android平台上，考虑多方面因素后，我们的词库中只有3万左右的单词量。iOS平台上做原型验证的时候，词库容量也只能做到10万左右。但是实际的业务需求中，是希望词库容量可以进一步增大的。\n2. iOS版本输入法的开发过程中，遇到了另外一个问题，就是键盘页面的加载速度和切换速度有点慢，用户能够感觉出来。\n\n### 解决办法\n#### 词库容量\n词库容量扩充这个问题，其实一直是一个难题，在 `Ternary Search Tree` 上也做过一些优化，但是变化并不明显。反而是在做server端开发，学习 `LevelDB` 的时候，碰巧发现 `LevelDB` 是一个很好的替代。首先 `LevelDB` 支持 `prefix search`，而且搜索速度也很快，测试数据表明完全满足我们的业务需求，其次 `LevelDB` 是将数据存储在文件系统上的，没有了内存大小的限制，词库的容量很轻松就可以扩充100倍以上，而且有了这种近乎无限的词库容量后，之前有一些需要复杂算法甚至很难实现的业务需求，现在也可以在超大词库的基础上，用**“简单但是粗暴”**的算法实现出来。\n\niOS平台上的 `Core Data` 是一套相当好用的数据持久化存储框架，唯一*`可能存在`*的问题就是性能，因此有些开发者在某些场景中，还是愿意去选择使用 `SQLite` 。有了这次的开发经验后，相信在某些应用场景中， `LevelDB` 也将会是一个很好的替代方案，比如 Square 开源的 [Viewfinder](https://github.com/viewfinderco/viewfinder.git) 中的客户端，就是用  `LevelDB` 实现的数据存储。`LevelDB` 的核心是 `LSM-Tree`，其实 [SQLite4](http://sqlite.org/src4/doc/trunk/www/lsmusr.wiki) 的核心，也是 `LSM-Tree`，小伙伴们，你们知道吗 :-)\n\n#### 页面加载和切换速度\n说实话，页面加载速度这个问题，挺出乎意料的，以前我们团队也做了这么多iOS应用了，从来没有在页面速度上遇到过问题，用 `Instruments`、 `NSLog` 对比分析了一遍，测量出来的页面加载时间，也和其他应用中页面加载消耗的时间差不多。大家讨论了一下为什么用户会觉得慢，得出的结论是，输入法本来就是一个效率型的工具app，用户心理的期待之一，就是键盘的速度要快，而普通类型的app，用户对速度不会这么敏感。\n\n问题已经出来了，还是得想办法去优化，吭哧吭哧写代码调试，从3个方面压缩了页面加载切换时消耗的时间：\n\n1. 键盘的view，是分了好几个层次的，当作为container的UIView加载完成后，就立刻让键盘先显示出来，然后再触发加载真正的keyboard view，这样给用户的一个心理感觉就是键盘弹出的速度很快。\n2. 键盘切换的时候，不再每次都重新从xib中加载对应的view，而是将view缓存在cache里面，用空间换时间。\n3. 移除了keyboard view中每个key view上的 `Auto Layout` 约束条件，直接在 `layoutSubviews` 方法中设置subview的 `frame`，关于这个优化思路，可以看看 [Optimising Autolayout](http://pilky.me/36/)。需要强调的是，我们并不是否定 `Auto Layout` ，实际上我们团队现在采用的思路是 `Auto Layout` 和 `Manual Frame Layout` 一起使用，代码布局和xib布局一起使用，根据页面的需求做出更合适的选择。\n\n这款输入法app，我们还全面切换到使用 `ReactiveCocoa` 这个框架进行开发，当时也怀疑过是不是因为这个框架造成了性能的损失，从 `Instruments` 的测量数据来看，我们的顾虑是多余的， `ReactiveCocoa` 虽然使得整个函数调用栈的层次增加了不少，但是，这不是性能瓶颈。","slug":"An-iOS-Keyboard-Extension-Performance-Optimize","updated":1411709787000,"excerpt":"","_id":"1yn4tvebnod6nxns","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"博客搬家 && 重新开博","date":1411698021000,"tags":[],"content":"<p>和小伙伴一起创业一年半了，投入了很大的精力，也舍弃了个人的一些事情，写博客便是其中之一。这一年多来，其实还是写了很多个人笔记，觉得还是有必要整理一些出来，所以便有了这个新的站点。</p>\n","source":"_posts/Move-To-A-New-Blog.md","raw":"title: 博客搬家 && 重新开博\ndate: 2014-09-26 10:20:21\ntags:\n---\n和小伙伴一起创业一年半了，投入了很大的精力，也舍弃了个人的一些事情，写博客便是其中之一。这一年多来，其实还是写了很多个人笔记，觉得还是有必要整理一些出来，所以便有了这个新的站点。","slug":"Move-To-A-New-Blog","updated":1411698563000,"excerpt":"","_id":"x3kzvpycnh7d5hnd","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"微信web页面开发代码规范以及最佳实践","date":1411710092000,"tags":["6mt3jc12j2bzzjvz","w9nkwe7k11axk5f2","x00096vafhu2lhwv","qvz8buit9tyyaqnj","noylkl4dst6p47pl","5yjottzk8nfgtre1"],"content":"<p>本来专职是做iOS开发的，对 <code>node.js</code> 感兴趣，所以也学习过服务器开发的一些皮毛。前段时间公司的一个产品，要覆盖iOS、Android和微信web这3个前端，微信web页面的第一个版本，是服务器端同事用最传统的web技术做出来的，也就是使用后端模板渲染的技术组装页面，前端js则使用了 <code>jQuery</code> 做简单的操作。东西做出来后，体验特别的不好，尤其是每次页面跳转都要加载一个新页面，会有延迟。后来狠下决心重做一遍，完全采用前端渲染的技术。当时本来就缺人手，好歹我也算是会用JavaScript，义不容辞的自然也就把这个项目接手过来了。</p>\n<p>做的过程很累，特别的赶进度，而且是摸着石头过河，未知的因素很多。还好iOS做的很熟悉了，很多经验或问题，可以直接照搬到web端，借助Google和Stack Overflow，记录了一大堆笔记出来。前两天另一个团队启动新项目，微信web端也是要做的，同事便找到我，想要一些经验分享，琢磨了一下，笔记写的比较凌乱，毕竟主要是给自己看的，符合自己的思维模式习惯，但是并不适合给别人看，干脆整理一份出来，方便别人查看，对自己也是再次清理一下思路。</p>\n<h3 id=\"CSS中如何命名class\">CSS中如何命名class</h3>\n<p>这个话题没有唯一答案，而且特别的松散，风格很多。</p>\n<p>目前团队里使用 <a href=\"http://webuild.envato.com/blog/how-to-scale-and-maintain-legacy-css-with-sass-and-smacss/\" target=\"_blank\" rel=\"external\">http://webuild.envato.com/blog/how-to-scale-and-maintain-legacy-css-with-sass-and-smacss/</a> 这种方案，但是并不完全遵照它的代码模板，比如我们不使用 <code>Sass</code> 语法，而是用 <code>SCSS</code> 语法。</p>\n<p>另外还推荐阅读 <a href=\"http://blog.jobbole.com/47702/\" target=\"_blank\" rel=\"external\">http://blog.jobbole.com/47702/</a> 这个里面提到了几乎所有的技术、框架、思路，比如 <code>Sass</code>、<code>BEM</code>、<code>OOCSS</code>、<code>SMACSS</code>、<code>OrganicCSS</code>等等。</p>\n<h3 id=\"使用_Sass_编写CSS\">使用 <code>Sass</code> 编写CSS</h3>\n<p>这个没啥多说的，语法并不难。引入了编程语言中的一些思路和技巧，对于iOS和Android开发者来说，很容易上手。</p>\n<h3 id=\"CSS书写规范_&amp;&amp;_顺序\">CSS书写规范 &amp;&amp; 顺序</h3>\n<p>参照 <a href=\"http://markdotto.com/2011/11/29/css-property-order/\" target=\"_blank\" rel=\"external\">http://markdotto.com/2011/11/29/css-property-order/</a> 以及 <a href=\"http://codegeekz.com/standardizing-css-property-order/\" target=\"_blank\" rel=\"external\">http://codegeekz.com/standardizing-css-property-order/</a></p>\n<h3 id=\"如何计算_CSS_Box_Model_中的_width_和_height\">如何计算 <code>CSS Box Model</code> 中的 <code>width</code> 和 <code>height</code></h3>\n<p>我们使用 <code>CSS3</code> 中的 <a href=\"http://www.w3school.com.cn/cssref/pr_box-sizing.asp\" target=\"_blank\" rel=\"external\"><code>border-box</code></a> 模型，这个就和iOS中的 <code>UIView</code> 的尺寸模型保持了一致，也更直观，容易理解。 </p>\n<h3 id=\"使用_Flexbox_做_Layout\">使用 <code>Flexbox</code> 做 Layout</h3>\n<p>项目的前期，为了实现一些手机上常见的布局，我们大量使用了CSS中的 <code>float</code> 、<code>table-cell</code> 等等，但是代码会比较复杂，而且可读性不好。直到发现了神器 <a href=\"http://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\" rel=\"external\"><code>Flexbox</code></a>。</p>\n<p>另外，还有一个基于 <code>Sass</code> 的工具 <a href=\"https://github.com/mastastealth/sass-flex-mixin.git\" target=\"_blank\" rel=\"external\">https://github.com/mastastealth/sass-flex-mixin.git</a>，帮助我们更好的进行编码。</p>\n<h3 id=\"使用_Yeoman_实现工作流\">使用 <code>Yeoman</code> 实现工作流</h3>\n<p>不懂得使用工具的web开发者，不是好前端，嘿嘿 ^_^</p>\n<h3 id=\"MV*_框架_Or_jQuery_类型的库\"><code>MV*</code> 框架 Or <code>jQuery</code> 类型的库</h3>\n<ul>\n<li>单纯从技术角度来看，<a href=\"https://angularjs.org/\" target=\"_blank\" rel=\"external\">AngularJS</a> 是最合适的框架，而且针对mobile，还有基于 <code>AngularJS</code> 的 <a href=\"http://ionicframework.com/\" target=\"_blank\" rel=\"external\">Ionic</a> 框架。<code>Ionic</code> 是对手机适配的最好的框架(没有之一)。但是 <code>Ionic</code> 的体积比较大，官方宣传时定义其为 <em>framework for developing hybrid mobile apps</em>。如果是对网速不敏感的使用场景，或者网速很快的场景，其实 <code>Ionic</code> 是可以做 <code>web app</code> 的。</li>\n<li>百度开源的 <a href=\"http://gmu.baidu.com/\" target=\"_blank\" rel=\"external\">gmu</a>，是类似于 <code>jQuery UI</code> 的库，但是是基于 <code>zepto</code> 的，很轻量级，而且也提供了不少的 <code>widget</code>。但是为了轻量，并没有套用 <code>MV*</code> 模式，所以应用场景复杂的时候，代码通常会组织的比较凌乱。交互界面复杂的时候，还会暴露出各种各样的坑，比如click事件穿透，就让我们大吃苦头。</li>\n<li>我个人已经不太愿意继续使用 <code>gmu</code> 了，如果<strong><em>真正只需要开发轻量级的页面</em></strong>，我宁愿直接用 <code>Sass</code> + <code>zepto</code> 或 <a href=\"http://minifiedjs.com/\" target=\"_blank\" rel=\"external\">http://minifiedjs.com/</a> 来实现。</li>\n<li><a href=\"http://backbonejs.org/\" target=\"_blank\" rel=\"external\">Backbone</a> 是相对轻量级的 <code>MVC</code> 框架，在体积大小和功能上有合理的舍取，但是框架本身只注重设计模式的引入，并不包含一套完整的针对mobile的 <code>widget</code>，所以我们还整理了另外一种思路，就是基于 <code>Backbone</code>，再加上各种各样小的lib，根据需求组合起来使用。这种方案可能存在的问题就是这些lib各自为政，不像 <code>AngularJS</code> 这种框架一样都在一个体系内协同工作，所以开发的时候也许会有很多坑，得做一遍才会有深刻的体会。有两个例子，非常值得学习参考，<a href=\"https://github.com/ccoenraets/directory-backbone-ratchet\" target=\"_blank\" rel=\"external\">https://github.com/ccoenraets/directory-backbone-ratchet</a> 和 <a href=\"http://n12v.com/2-way-data-binding/\" target=\"_blank\" rel=\"external\">http://n12v.com/2-way-data-binding/</a>。</li>\n</ul>\n<h3 id=\"常见widget\">常见<code>widget</code></h3>\n<p>按照iOS平台上的开发经验，针对mobile，常见的 <code>widget</code> 包括这些(有官方SDK自带的，也有大量第三方开源的，iOS平台现在很完善，有很多 <code>widget</code> 可以拿来即用)</p>\n<ul>\n<li>button，textinput，slider，progress bar，image view，switch等等，这些是最常见的 <code>widget</code></li>\n<li>全屏HUD，比如iOS上的 <a href=\"https://github.com/jdg/MBProgressHUD\" target=\"_blank\" rel=\"external\">https://github.com/jdg/MBProgressHUD</a></li>\n<li>全屏的菜单选择类 <code>widget</code>，比如iOS自带的 <code>UIAlertView</code> 和 <code>UIActionSheet</code></li>\n<li>popview，比如iOS上的 <a href=\"https://github.com/chrismiles/CMPopTipView.git\" target=\"_blank\" rel=\"external\">https://github.com/chrismiles/CMPopTipView.git</a></li>\n<li>免干扰式的下拉信息提示框，比如iOS上的 <a href=\"https://github.com/toursprung/TSMessages.git\" target=\"_blank\" rel=\"external\">https://github.com/toursprung/TSMessages.git</a></li>\n<li>系统级的页面切换方式，比如iOS自带的 <code>UINavigationController</code> 和 <code>UITabBarController</code>，以及第三方开源的 <a href=\"https://github.com/ECSlidingViewController/ECSlidingViewController.git\" target=\"_blank\" rel=\"external\">https://github.com/ECSlidingViewController/ECSlidingViewController.git</a></li>\n</ul>\n<p>mobile web平台上，<code>widget</code> 的生态环境并不好。相对而言，<a href=\"http://ionicframework.com/\" target=\"_blank\" rel=\"external\">Ionic</a> 自带的<code>widget</code>是最完善的，而且有框架的支持，也更容易实现自定义的 <code>widget</code>。唯一的问题就是 <code>Ionic</code> 框架比较大。</p>\n<p><code>Backbone</code> 或 <code>gmu</code> 中，除了最常见的 <code>widget</code> 外，其他的通常都只能自己实现，比如在使用 <code>gmu</code> 的时候，我们就只能自己编写<a href=\"https://github.com/fengjian0106/actionsheet.git\" target=\"_blank\" rel=\"external\"><code>ActionSheet</code></a>、全屏HUD、免干扰式的下拉信息提示框、以及系统级的页面导航控制器。由于缺少框架级的支持，除了 <a href=\"https://github.com/fengjian0106/actionsheet.git\" target=\"_blank\" rel=\"external\"><code>ActionSheet</code></a> 外，其他几个 <code>widget</code> 的代码实现都很粗暴，而且遇到了各种各样的bug。</p>\n<p>实际项目中，最好从一开始做交互设计的时候，就考虑 <code>widget</code> 的问题，尽量使用最常见的 <code>widget</code>，舍弃一些复杂的交互方式。</p>\n","source":"_posts/WeiXin-Web-App-Coding-Convention-And-Best-Practice.md","raw":"title: 微信web页面开发代码规范以及最佳实践\ndate: 2014-09-26 13:41:32\ntags: [html, css, sass, flexbox, mvc, mvvm]\n---\n\n本来专职是做iOS开发的，对 `node.js` 感兴趣，所以也学习过服务器开发的一些皮毛。前段时间公司的一个产品，要覆盖iOS、Android和微信web这3个前端，微信web页面的第一个版本，是服务器端同事用最传统的web技术做出来的，也就是使用后端模板渲染的技术组装页面，前端js则使用了 `jQuery` 做简单的操作。东西做出来后，体验特别的不好，尤其是每次页面跳转都要加载一个新页面，会有延迟。后来狠下决心重做一遍，完全采用前端渲染的技术。当时本来就缺人手，好歹我也算是会用JavaScript，义不容辞的自然也就把这个项目接手过来了。\n\n做的过程很累，特别的赶进度，而且是摸着石头过河，未知的因素很多。还好iOS做的很熟悉了，很多经验或问题，可以直接照搬到web端，借助Google和Stack Overflow，记录了一大堆笔记出来。前两天另一个团队启动新项目，微信web端也是要做的，同事便找到我，想要一些经验分享，琢磨了一下，笔记写的比较凌乱，毕竟主要是给自己看的，符合自己的思维模式习惯，但是并不适合给别人看，干脆整理一份出来，方便别人查看，对自己也是再次清理一下思路。\n\n### CSS中如何命名class\n这个话题没有唯一答案，而且特别的松散，风格很多。\n\n目前团队里使用 <http://webuild.envato.com/blog/how-to-scale-and-maintain-legacy-css-with-sass-and-smacss/> 这种方案，但是并不完全遵照它的代码模板，比如我们不使用 `Sass` 语法，而是用 `SCSS` 语法。\n\n另外还推荐阅读 <http://blog.jobbole.com/47702/> 这个里面提到了几乎所有的技术、框架、思路，比如 `Sass`、`BEM`、`OOCSS`、`SMACSS`、`OrganicCSS`等等。\n\n### 使用 `Sass` 编写CSS\n这个没啥多说的，语法并不难。引入了编程语言中的一些思路和技巧，对于iOS和Android开发者来说，很容易上手。\n\n### CSS书写规范 && 顺序\n\n参照 <http://markdotto.com/2011/11/29/css-property-order/> 以及 <http://codegeekz.com/standardizing-css-property-order/>\n\n### 如何计算 `CSS Box Model` 中的 `width` 和 `height`\n我们使用 `CSS3` 中的 [`border-box`](http://www.w3school.com.cn/cssref/pr_box-sizing.asp) 模型，这个就和iOS中的 `UIView` 的尺寸模型保持了一致，也更直观，容易理解。 \n\n### 使用 `Flexbox` 做 Layout\n项目的前期，为了实现一些手机上常见的布局，我们大量使用了CSS中的 `float` 、`table-cell` 等等，但是代码会比较复杂，而且可读性不好。直到发现了神器 [`Flexbox`](http://css-tricks.com/snippets/css/a-guide-to-flexbox/)。\n\n另外，还有一个基于 `Sass` 的工具 <https://github.com/mastastealth/sass-flex-mixin.git>，帮助我们更好的进行编码。\n\n### 使用 `Yeoman` 实现工作流\n不懂得使用工具的web开发者，不是好前端，嘿嘿 ^_^\n\n\n### `MV*` 框架 Or `jQuery` 类型的库\n* 单纯从技术角度来看，[AngularJS](https://angularjs.org/) 是最合适的框架，而且针对mobile，还有基于 `AngularJS` 的 [Ionic](http://ionicframework.com/) 框架。`Ionic` 是对手机适配的最好的框架(没有之一)。但是 `Ionic` 的体积比较大，官方宣传时定义其为 *framework for developing hybrid mobile apps*。如果是对网速不敏感的使用场景，或者网速很快的场景，其实 `Ionic` 是可以做 `web app` 的。\n* 百度开源的 [gmu](http://gmu.baidu.com/)，是类似于 `jQuery UI` 的库，但是是基于 `zepto` 的，很轻量级，而且也提供了不少的 `widget`。但是为了轻量，并没有套用 `MV*` 模式，所以应用场景复杂的时候，代码通常会组织的比较凌乱。交互界面复杂的时候，还会暴露出各种各样的坑，比如click事件穿透，就让我们大吃苦头。\n* 我个人已经不太愿意继续使用 `gmu` 了，如果**_真正只需要开发轻量级的页面_**，我宁愿直接用 `Sass` + `zepto` 或 <http://minifiedjs.com/> 来实现。\n* [Backbone](http://backbonejs.org/) 是相对轻量级的 `MVC` 框架，在体积大小和功能上有合理的舍取，但是框架本身只注重设计模式的引入，并不包含一套完整的针对mobile的 `widget`，所以我们还整理了另外一种思路，就是基于 `Backbone`，再加上各种各样小的lib，根据需求组合起来使用。这种方案可能存在的问题就是这些lib各自为政，不像 `AngularJS` 这种框架一样都在一个体系内协同工作，所以开发的时候也许会有很多坑，得做一遍才会有深刻的体会。有两个例子，非常值得学习参考，<https://github.com/ccoenraets/directory-backbone-ratchet> 和 <http://n12v.com/2-way-data-binding/>。\n\n### 常见`widget`\n按照iOS平台上的开发经验，针对mobile，常见的 `widget` 包括这些(有官方SDK自带的，也有大量第三方开源的，iOS平台现在很完善，有很多 `widget` 可以拿来即用)\n\n* button，textinput，slider，progress bar，image view，switch等等，这些是最常见的 `widget`\n* 全屏HUD，比如iOS上的 <https://github.com/jdg/MBProgressHUD>\n* 全屏的菜单选择类 `widget`，比如iOS自带的 `UIAlertView` 和 `UIActionSheet`\n* popview，比如iOS上的 <https://github.com/chrismiles/CMPopTipView.git>\n* 免干扰式的下拉信息提示框，比如iOS上的 <https://github.com/toursprung/TSMessages.git>\n* 系统级的页面切换方式，比如iOS自带的 `UINavigationController` 和 `UITabBarController`，以及第三方开源的 <https://github.com/ECSlidingViewController/ECSlidingViewController.git>\n\nmobile web平台上，`widget` 的生态环境并不好。相对而言，[Ionic](http://ionicframework.com/) 自带的`widget`是最完善的，而且有框架的支持，也更容易实现自定义的 `widget`。唯一的问题就是 `Ionic` 框架比较大。\n\n`Backbone` 或 `gmu` 中，除了最常见的 `widget` 外，其他的通常都只能自己实现，比如在使用 `gmu` 的时候，我们就只能自己编写[`ActionSheet`](https://github.com/fengjian0106/actionsheet.git)、全屏HUD、免干扰式的下拉信息提示框、以及系统级的页面导航控制器。由于缺少框架级的支持，除了 [`ActionSheet`](https://github.com/fengjian0106/actionsheet.git) 外，其他几个 `widget` 的代码实现都很粗暴，而且遇到了各种各样的bug。\n\n实际项目中，最好从一开始做交互设计的时候，就考虑 `widget` 的问题，尽量使用最常见的 `widget`，舍弃一些复杂的交互方式。","slug":"WeiXin-Web-App-Coding-Convention-And-Best-Practice","updated":1411716859000,"excerpt":"","_id":"phpgiqfuy0069xxc","categories":[],"comments":true,"layout":"post","photos":[],"link":""},{"title":"iOS cache系统和自定义http代理","date":1412759498000,"tags":["ghhk3h56ejin6n6k","v08hxifp5kvvvyhr","1hhcwqk8ib8ctlv3"],"content":"<p>面试的时候，我喜欢问一些关于iOS http cache的问题，遇见不少开发者，第一反应都是自己编码实现整个cache存取流程，思路是没有问题的，但是这并不是我想要的答案。对于大部分使用场景，iOS自带的cache系统，就已经足够了，官方文档里也描述的很清楚，可以直接看 <a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/Concepts/CachePolicies.html\" target=\"_blank\" rel=\"external\">Understanding Cache Access</a>。</p>\n<h3 id=\"流媒体播放的缓存需求\">流媒体播放的缓存需求</h3>\n<p>在做一个音乐播放器app的过程中，有一个需求是可以边播放边缓存，并且不能浪费流量(不能播放时有一次http下载，离线缓存时又有另一次http下载)。</p>\n<h3 id=\"技术方案\">技术方案</h3>\n<p>查了一大堆文档，做了很多原型代码，最终还是发现 <code>AVQueuePlayer</code> 并不是基于 <a href=\"https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html\" target=\"_blank\" rel=\"external\">URL Loading System</a> 实现的，所以不可能直接使用其中的cache系统，只能想其他的办法，比如:</p>\n<ol>\n<li>使用 <a href=\"https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/Introduction/Introduction.html\" target=\"_blank\" rel=\"external\">CFNetwork</a>、<a href=\"https://developer.apple.com/library/ios/documentation/MusicAudio/Reference/AudioStreamReference/index.html\" target=\"_blank\" rel=\"external\">Audio File Stream Services</a> 以及 <a href=\"https://developer.apple.com/library/ios/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html\" target=\"_blank\" rel=\"external\">Audio Queue Services</a> 分别实现http下载、多媒体解码和播放过程，因为所有的流程都是自己控制，自然也就可以实现边播边存的效果。  </li>\n<li>使用 <code>ffmpeg</code> 第三方多媒体框架来实现。  </li>\n<li>仍然使用iOS自带的 <code>AVQueuePlayer</code> 进行http流媒体播放，但是在app内运行一个支持cache的 <code>http proxy</code>，让 <code>AVQueuePlayer</code> 通过这个 proxy 请求多媒体文件。</li>\n</ol>\n<h3 id=\"方案对比\">方案对比</h3>\n<p>第一种方案是比较容易想到的，但是其实实现的难度比较大，三个模块都要使用偏底层的接口，学习成本很高。第二种方案其实也是学习成本很高，而且只能使用 <code>ffmpeg</code> 的软解码器，功耗也会很大。前两个方案还有一个共同的问题，就是需要自己考虑如何和iOS系统做整合，比如如何优雅的实现后台播放功能等等。综合考虑后，还是选择了第三种方案，虽然也有一定的学习成本，而且需要修改标准的 <code>http proxy</code> 协议，但是大部分模块都是用iOS的SDK实现的，和操作系统贴合的最紧密。</p>\n<h3 id=\"实现_http_proxy\">实现 http proxy</h3>\n<p>自己完整的实现一个 <code>http proxy</code>，也是一件很复杂的事情，所以还是偏向于找开源方案，对比了几个开源方案后，最终选择在 <a href=\"http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/\" target=\"_blank\" rel=\"external\">Polipo</a> 的基础上进行修改。</p>\n<p>有一个技术细节需要说明一下，当使用浏览器、不使用代理的时候，通过抓包可以看到浏览器发出的http请求如下(忽略了无关内容):  </p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"request\">GET <span class=\"string\">/</span> HTTP/1.1</span></div><div class=\"line\"><span class=\"attribute\">Host</span>: <span class=\"string\">www.example.com</span></div><div class=\"line\"><span class=\"attribute\">Connection</span>: <span class=\"string\">keep-alive</span></div></pre></td></tr></table></figure>\n\n<p>当使用浏览器并且使用代理的时候，通过抓包可以看到浏览器发出的http请求如下(忽略了无关内容):</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"request\">GET <span class=\"string\">http://www.example.com/</span> HTTP/1.1</span></div><div class=\"line\"><span class=\"attribute\">Host</span>: <span class=\"string\">www.example.com</span></div><div class=\"line\"><span class=\"attribute\">Proxy-Connection</span>: <span class=\"string\">keep-alive</span></div></pre></td></tr></table></figure>\n\n<p>最重要的一个区别就是 <code>GET</code> 请求后面的路径信息，前者是相对路径 <code>/</code>，而后者是绝对路径 <code>http://www.example.com/</code>。因为浏览器本身支持设置代理，所以浏览器会拼接合适的路径信息并且发送。但是iOS的 <code>AVQueuePlayer</code> 并不支持 <code>http proxy</code> 功能，无法和标准的代理服务器协同工作，所以只能同时在 <code>AVQueuePlayer</code> 和 <a href=\"http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/\" target=\"_blank\" rel=\"external\">Polipo</a> 上做一些小的修改。</p>\n<p>使用 <code>AVQueuePlayer</code> 的时候，需要做一些 <code>magic trick</code>，关键代码如下:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">httpProxyUrl = [NSURL URLWithStrin<span class=\"variable\">g:</span>[NSString stringWithForma<span class=\"variable\">t:</span>@<span class=\"string\">\"http://127.0.0.1:%d/http://%@/music_new/%@\"</span>, httpProxyPort, kKYMediaServiceManagerRemoteServerIpAndPort, mediaInfo.fileName]];</div></pre></td></tr></table></figure>\n\n<p>可以这样来理解这段代码，假设app内的 <code>http proxy</code> 的地址为 <code>127.0.0.1:9258</code>，实际的多媒体文件的地址为 <code>http://media.test.com/xxx.mp3</code>，那么 <code>AVQueuePlayer</code> 请求的最终地址就应该是:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>/<span class=\"regexp\">/127.0.0.1:9258/http</span><span class=\"symbol\">://media</span>.test.com/xxx.mp3</div></pre></td></tr></table></figure>\n\n<p>在 <a href=\"http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/\" target=\"_blank\" rel=\"external\">Polipo</a> 中，解析得到的最终目的服务器的地址(相对路径)是 <code>/http://media.test.com/xxx.mp3</code>，需要稍微修改一下源代码，去掉最左侧的 <code>/</code> 字符。具体就是在 <code>client.c</code> 文件的 <code>httpClientHandlerHeaders</code> 函数中添加一小段代码，也就是 <code>#ifdef POLIPO_KUYQI_VERSION</code> 和 <code>#endif</code> 之间的那一段:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"type\">int</span></div><div class=\"line\">httpClientHandlerHeaders(<span class=\"type\">FdEventHandlerPtr</span> event, <span class=\"type\">StreamRequestPtr</span> srequest,</div><div class=\"line\">                         <span class=\"type\">HTTPConnectionPtr</span> connection)</div><div class=\"line\">{</div><div class=\"line\">    <span class=\"type\">HTTPRequestPtr</span> request;</div><div class=\"line\">    <span class=\"type\">int</span> rc;</div><div class=\"line\">    <span class=\"type\">int</span> <span class=\"keyword\">method</span>, version;</div><div class=\"line\">    <span class=\"type\">AtomPtr</span> url = <span class=\"type\">NULL</span>;</div><div class=\"line\">    <span class=\"type\">int</span> start;</div><div class=\"line\">    <span class=\"type\">int</span> code;</div><div class=\"line\">    <span class=\"type\">AtomPtr</span> message;</div><div class=\"line\"></div><div class=\"line\">    start = <span class=\"number\">0</span>;</div><div class=\"line\">    /* <span class=\"type\">Work</span> around clients working around <span class=\"type\">NCSA</span> lossage. */</div><div class=\"line\">    <span class=\"keyword\">if</span>(connection-&gt;reqbuf[<span class=\"number\">0</span>] == '\\n')</div><div class=\"line\">        start = <span class=\"number\">1</span>;</div><div class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(connection-&gt;reqbuf[<span class=\"number\">0</span>] == '\\r' && connection-&gt;reqbuf[<span class=\"number\">1</span>] == '\\n')</div><div class=\"line\">        start = <span class=\"number\">2</span>;</div><div class=\"line\"></div><div class=\"line\">    httpSetTimeout(connection, -<span class=\"number\">1</span>);</div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\"><span class=\"comment\">#ifdef POLIPO_KUYQI_VERSION</span></div><div class=\"line\">    <span class=\"type\">char</span> *pch;</div><div class=\"line\">    pch = strstr (connection-&gt;reqbuf, <span class=\"string\">\"/http://\"</span>);//<span class=\"type\">TODO</span>: <span class=\"keyword\">if</span> the client use url encoding??</div><div class=\"line\">    <span class=\"keyword\">if</span> (pch == <span class=\"type\">NULL</span>) {</div><div class=\"line\">        //fprintf(<span class=\"literal\">stderr</span>, <span class=\"string\">\"###########this is normal http request\\r\\n\"</span>);</div><div class=\"line\">    } <span class=\"keyword\">else</span> {</div><div class=\"line\">        //remove the first '/'</div><div class=\"line\">        pch = strstr (connection-&gt;reqbuf, <span class=\"string\">\"/\"</span>);</div><div class=\"line\">        pch[<span class=\"number\">0</span>] = ' ';</div><div class=\"line\">    }</div><div class=\"line\"><span class=\"comment\">#endif</span></div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    </div><div class=\"line\">    rc = httpParseClientFirstLine(connection-&gt;reqbuf, start,</div><div class=\"line\">                                  &<span class=\"keyword\">method</span>, &url, &version);</div><div class=\"line\">    <span class=\"keyword\">if</span>(rc &lt;= <span class=\"number\">0</span>) {</div><div class=\"line\">        do_log(<span class=\"type\">L_ERROR</span>, <span class=\"string\">\"Couldn't parse client's request line\\n\"</span>);</div><div class=\"line\">        code = <span class=\"number\">400</span>;</div><div class=\"line\">        message =  internAtom(<span class=\"string\">\"Error in request line\"</span>);</div><div class=\"line\">        goto fail;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    do_log(<span class=\"type\">D_CLIENT_REQ</span>, <span class=\"string\">\"Client request: \"</span>);</div><div class=\"line\">    do_log_n(<span class=\"type\">D_CLIENT_REQ</span>, connection-&gt;reqbuf, rc - <span class=\"number\">1</span>);</div><div class=\"line\">    do_log(<span class=\"type\">D_CLIENT_REQ</span>, <span class=\"string\">\"\\n\"</span>);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(version != <span class=\"type\">HTTP_10</span> && version != <span class=\"type\">HTTP_11</span>) {</div><div class=\"line\">        do_log(<span class=\"type\">L_ERROR</span>, <span class=\"string\">\"Unknown client HTTP version\\n\"</span>);</div><div class=\"line\">        code = <span class=\"number\">400</span>;</div><div class=\"line\">        message = internAtom(<span class=\"string\">\"Error in first request line\"</span>);</div><div class=\"line\">        goto fail;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"keyword\">method</span> == <span class=\"type\">METHOD_UNKNOWN</span>) {</div><div class=\"line\">        code = <span class=\"number\">501</span>;</div><div class=\"line\">        message =  internAtom(<span class=\"string\">\"Method not implemented\"</span>);</div><div class=\"line\">        goto fail;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    request = httpMakeRequest();</div><div class=\"line\">    <span class=\"keyword\">if</span>(request == <span class=\"type\">NULL</span>) {</div><div class=\"line\">        do_log(<span class=\"type\">L_ERROR</span>, <span class=\"string\">\"Couldn't allocate client request.\\n\"</span>);</div><div class=\"line\">        code = <span class=\"number\">500</span>;</div><div class=\"line\">        message = internAtom(<span class=\"string\">\"Couldn't allocate client request\"</span>);</div><div class=\"line\">        goto fail;</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span>(connection-&gt;version != <span class=\"type\">HTTP_UNKNOWN</span> && version != connection-&gt;version) {</div><div class=\"line\">        do_log(<span class=\"type\">L_WARN</span>, <span class=\"string\">\"Client version changed!\\n\"</span>);</div><div class=\"line\">    }</div><div class=\"line\"></div><div class=\"line\">    connection-&gt;version = version;</div><div class=\"line\">    request-&gt;flags = <span class=\"type\">REQUEST_PERSISTENT</span>;</div><div class=\"line\">    request-&gt;<span class=\"keyword\">method</span> = <span class=\"keyword\">method</span>;</div><div class=\"line\">    request-&gt;cache_control = no_cache_control;</div><div class=\"line\">    httpQueueRequest(connection, request);</div><div class=\"line\">    connection-&gt;reqbegin = rc;</div><div class=\"line\">    <span class=\"keyword\">return</span> httpClientRequest(request, url);</div><div class=\"line\"></div><div class=\"line\"> fail:</div><div class=\"line\">    <span class=\"keyword\">if</span>(url) releaseAtom(url);</div><div class=\"line\">    shutdown(connection-&gt;fd, <span class=\"number\">0</span>);</div><div class=\"line\">    connection-&gt;reqlen = <span class=\"number\">0</span>;</div><div class=\"line\">    connection-&gt;reqbegin = <span class=\"number\">0</span>;</div><div class=\"line\">    httpConnectionDestroyReqbuf(connection);</div><div class=\"line\">    connection-&gt;flags &= ~<span class=\"type\">CONN_READER</span>;</div><div class=\"line\">    httpClientNewError(connection, <span class=\"type\">METHOD_UNKNOWN</span>, <span class=\"number\">0</span>, code, message);</div><div class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</div><div class=\"line\"></div><div class=\"line\">}</div></pre></td></tr></table></figure>\n\n","source":"_posts/iOS-Cache-Access-And-Custom-Http-Proxy.md","raw":"title: iOS cache系统和自定义http代理\ndate: 2014-10-08 17:11:38\ntags: [iOS, cache, proxy]\n---\n\n面试的时候，我喜欢问一些关于iOS http cache的问题，遇见不少开发者，第一反应都是自己编码实现整个cache存取流程，思路是没有问题的，但是这并不是我想要的答案。对于大部分使用场景，iOS自带的cache系统，就已经足够了，官方文档里也描述的很清楚，可以直接看 [Understanding Cache Access](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/Concepts/CachePolicies.html)。\n\n### 流媒体播放的缓存需求\n在做一个音乐播放器app的过程中，有一个需求是可以边播放边缓存，并且不能浪费流量(不能播放时有一次http下载，离线缓存时又有另一次http下载)。\n\n### 技术方案\n查了一大堆文档，做了很多原型代码，最终还是发现 `AVQueuePlayer` 并不是基于 [URL Loading System](https://developer.apple.com/library/ios/documentation/Cocoa/Conceptual/URLLoadingSystem/URLLoadingSystem.html) 实现的，所以不可能直接使用其中的cache系统，只能想其他的办法，比如:\n\n1. 使用 [CFNetwork](https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/Introduction/Introduction.html)、[Audio File Stream Services](https://developer.apple.com/library/ios/documentation/MusicAudio/Reference/AudioStreamReference/index.html) 以及 [Audio Queue Services](https://developer.apple.com/library/ios/documentation/MusicAudio/Conceptual/AudioQueueProgrammingGuide/Introduction/Introduction.html) 分别实现http下载、多媒体解码和播放过程，因为所有的流程都是自己控制，自然也就可以实现边播边存的效果。  \n2. 使用 `ffmpeg` 第三方多媒体框架来实现。  \n3. 仍然使用iOS自带的 `AVQueuePlayer` 进行http流媒体播放，但是在app内运行一个支持cache的 `http proxy`，让 `AVQueuePlayer` 通过这个 proxy 请求多媒体文件。\n\n### 方案对比\n第一种方案是比较容易想到的，但是其实实现的难度比较大，三个模块都要使用偏底层的接口，学习成本很高。第二种方案其实也是学习成本很高，而且只能使用 `ffmpeg` 的软解码器，功耗也会很大。前两个方案还有一个共同的问题，就是需要自己考虑如何和iOS系统做整合，比如如何优雅的实现后台播放功能等等。综合考虑后，还是选择了第三种方案，虽然也有一定的学习成本，而且需要修改标准的 `http proxy` 协议，但是大部分模块都是用iOS的SDK实现的，和操作系统贴合的最紧密。\n\n### 实现 http proxy\n自己完整的实现一个 `http proxy`，也是一件很复杂的事情，所以还是偏向于找开源方案，对比了几个开源方案后，最终选择在 [Polipo](http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/) 的基础上进行修改。\n  \n有一个技术细节需要说明一下，当使用浏览器、不使用代理的时候，通过抓包可以看到浏览器发出的http请求如下(忽略了无关内容):  \n\n```   \nGET / HTTP/1.1\nHost: www.example.com\nConnection: keep-alive\n```\n\n当使用浏览器并且使用代理的时候，通过抓包可以看到浏览器发出的http请求如下(忽略了无关内容):\n\n```   \nGET http://www.example.com/ HTTP/1.1\nHost: www.example.com\nProxy-Connection: keep-alive\n```\n\n最重要的一个区别就是 `GET` 请求后面的路径信息，前者是相对路径 `/`，而后者是绝对路径 `http://www.example.com/`。因为浏览器本身支持设置代理，所以浏览器会拼接合适的路径信息并且发送。但是iOS的 `AVQueuePlayer` 并不支持 `http proxy` 功能，无法和标准的代理服务器协同工作，所以只能同时在 `AVQueuePlayer` 和 [Polipo](http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/) 上做一些小的修改。\n\n使用 `AVQueuePlayer` 的时候，需要做一些 `magic trick`，关键代码如下:\n\n```\nhttpProxyUrl = [NSURL URLWithString:[NSString stringWithFormat:@\"http://127.0.0.1:%d/http://%@/music_new/%@\", httpProxyPort, kKYMediaServiceManagerRemoteServerIpAndPort, mediaInfo.fileName]];\n```\n\n可以这样来理解这段代码，假设app内的 `http proxy` 的地址为 `127.0.0.1:9258`，实际的多媒体文件的地址为 `http://media.test.com/xxx.mp3`，那么 `AVQueuePlayer` 请求的最终地址就应该是:\n\n```\nhttp://127.0.0.1:9258/http://media.test.com/xxx.mp3\n```\n\n在 [Polipo](http://www.pps.univ-paris-diderot.fr/~jch/software/polipo/) 中，解析得到的最终目的服务器的地址(相对路径)是 `/http://media.test.com/xxx.mp3`，需要稍微修改一下源代码，去掉最左侧的 `/` 字符。具体就是在 `client.c` 文件的 `httpClientHandlerHeaders` 函数中添加一小段代码，也就是 `#ifdef POLIPO_KUYQI_VERSION` 和 `#endif` 之间的那一段:\n\n```\nint\nhttpClientHandlerHeaders(FdEventHandlerPtr event, StreamRequestPtr srequest,\n                         HTTPConnectionPtr connection)\n{\n    HTTPRequestPtr request;\n    int rc;\n    int method, version;\n    AtomPtr url = NULL;\n    int start;\n    int code;\n    AtomPtr message;\n\n    start = 0;\n    /* Work around clients working around NCSA lossage. */\n    if(connection->reqbuf[0] == '\\n')\n        start = 1;\n    else if(connection->reqbuf[0] == '\\r' && connection->reqbuf[1] == '\\n')\n        start = 2;\n\n    httpSetTimeout(connection, -1);\n    \n    \n#ifdef POLIPO_KUYQI_VERSION\n    char *pch;\n    pch = strstr (connection->reqbuf, \"/http://\");//TODO: if the client use url encoding??\n    if (pch == NULL) {\n        //fprintf(stderr, \"###########this is normal http request\\r\\n\");\n    } else {\n        //remove the first '/'\n        pch = strstr (connection->reqbuf, \"/\");\n        pch[0] = ' ';\n    }\n#endif\n    \n    \n    \n    rc = httpParseClientFirstLine(connection->reqbuf, start,\n                                  &method, &url, &version);\n    if(rc <= 0) {\n        do_log(L_ERROR, \"Couldn't parse client's request line\\n\");\n        code = 400;\n        message =  internAtom(\"Error in request line\");\n        goto fail;\n    }\n\n    do_log(D_CLIENT_REQ, \"Client request: \");\n    do_log_n(D_CLIENT_REQ, connection->reqbuf, rc - 1);\n    do_log(D_CLIENT_REQ, \"\\n\");\n\n    if(version != HTTP_10 && version != HTTP_11) {\n        do_log(L_ERROR, \"Unknown client HTTP version\\n\");\n        code = 400;\n        message = internAtom(\"Error in first request line\");\n        goto fail;\n    }\n\n    if(method == METHOD_UNKNOWN) {\n        code = 501;\n        message =  internAtom(\"Method not implemented\");\n        goto fail;\n    }\n\n    request = httpMakeRequest();\n    if(request == NULL) {\n        do_log(L_ERROR, \"Couldn't allocate client request.\\n\");\n        code = 500;\n        message = internAtom(\"Couldn't allocate client request\");\n        goto fail;\n    }\n\n    if(connection->version != HTTP_UNKNOWN && version != connection->version) {\n        do_log(L_WARN, \"Client version changed!\\n\");\n    }\n\n    connection->version = version;\n    request->flags = REQUEST_PERSISTENT;\n    request->method = method;\n    request->cache_control = no_cache_control;\n    httpQueueRequest(connection, request);\n    connection->reqbegin = rc;\n    return httpClientRequest(request, url);\n\n fail:\n    if(url) releaseAtom(url);\n    shutdown(connection->fd, 0);\n    connection->reqlen = 0;\n    connection->reqbegin = 0;\n    httpConnectionDestroyReqbuf(connection);\n    connection->flags &= ~CONN_READER;\n    httpClientNewError(connection, METHOD_UNKNOWN, 0, code, message);\n    return 1;\n\n}\n```\n\n\n","slug":"iOS-Cache-Access-And-Custom-Http-Proxy","updated":1412920323000,"excerpt":"","_id":"g7gqr34om3lg44ey","categories":[],"comments":true,"layout":"post","photos":[],"link":""}],"Tag":[{"name":"iOS keyborad LevelDB AutoLayout","_id":"2jxxz0cg73j3rz30","posts":[]},{"name":"iOS","_id":"ghhk3h56ejin6n6k","posts":["1yn4tvebnod6nxns","g7gqr34om3lg44ey"]},{"name":"keyborad","_id":"yiivqq1v24a9qmua","posts":["1yn4tvebnod6nxns"]},{"name":"LevelDB","_id":"5za0e9cgsm8461rg","posts":["1yn4tvebnod6nxns"]},{"name":"AutoLayout","_id":"678l7zpdxcz3a17h","posts":["1yn4tvebnod6nxns"]},{"name":"html","_id":"6mt3jc12j2bzzjvz","posts":["phpgiqfuy0069xxc"]},{"name":"css","_id":"w9nkwe7k11axk5f2","posts":["phpgiqfuy0069xxc"]},{"name":"flexbox","_id":"qvz8buit9tyyaqnj","posts":["phpgiqfuy0069xxc"]},{"name":"mvc","_id":"noylkl4dst6p47pl","posts":["phpgiqfuy0069xxc"]},{"name":"mvvm","_id":"5yjottzk8nfgtre1","posts":["phpgiqfuy0069xxc"]},{"name":"sass","_id":"x00096vafhu2lhwv","posts":["phpgiqfuy0069xxc"]},{"name":"cache","_id":"v08hxifp5kvvvyhr","posts":["g7gqr34om3lg44ey"]},{"name":"proxy","_id":"1hhcwqk8ib8ctlv3","posts":["g7gqr34om3lg44ey"]}]}